#pragma checksum "/home/shunjid/Documents/7th/eChartiFy/Views/Shared/_LoadChartIndex1.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d1903cf52f7c2792bdf44b7b4191e847b7ccf13e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__LoadChartIndex1), @"mvc.1.0.view", @"/Views/Shared/_LoadChartIndex1.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_LoadChartIndex1.cshtml", typeof(AspNetCore.Views_Shared__LoadChartIndex1))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/shunjid/Documents/7th/eChartiFy/Views/_ViewImports.cshtml"
using electionDbAnalytics;

#line default
#line hidden
#line 2 "/home/shunjid/Documents/7th/eChartiFy/Views/_ViewImports.cshtml"
using electionDbAnalytics.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d1903cf52f7c2792bdf44b7b4191e847b7ccf13e", @"/Views/Shared/_LoadChartIndex1.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"58e089a0dde2abdb61d1b13939118ce91353a68d", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__LoadChartIndex1 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("card-img-top responsive-img"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/img_votingline.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Card image cap"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/img_votingline2.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/echartmin.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("exclude", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 472, true);
            WriteLiteral(@"<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col l8"">
            <div class=""card"">
                <div class=""card-content analytics-info"">
                    <h5 class=""card-title"">Nested Pie Chart</h5>
                    <div id=""nested-pie"" style=""height:400px;""></div>
                </div>
            </div>
        </div>
        <div class=""col s4"">
           <div class="""">
                <div class=""card"">
                    ");
            EndContext();
            BeginContext(472, 93, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "d1903cf52f7c2792bdf44b7b4191e847b7ccf13e5928", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(565, 495, true);
            WriteLiteral(@"
                    <div class=""card-content"">
                        <div class=""d-flex no-block align-items-center m-b-15 red-text"">
                            <i class=""material-icons red-text"">assignment</i>&nbsp;&nbsp;Chart Report
                        </div>
                        <h6 style=""text-align: justify;"">This chart represents total registered voters and valid voters according to each of the divisional
                            cities of Bangladesh's National Election ");
            EndContext();
            BeginContext(1061, 20, false);
#line 20 "/home/shunjid/Documents/7th/eChartiFy/Views/Shared/_LoadChartIndex1.cshtml"
                                                                Write(ViewBag.electionYear);

#line default
#line hidden
            EndContext();
            BeginContext(1081, 412, true);
            WriteLiteral(@" <br><br> Hover mouse over the chart for details.
                            To save the chart in your device click the download button
                        </h6>
                    </div>
                </div>
            </div>
        </div>
    </div>

        
        <div class=""row"">
            <div class=""col s4"">
           <div class="""">
                <div class=""card"">
                    ");
            EndContext();
            BeginContext(1493, 94, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "d1903cf52f7c2792bdf44b7b4191e847b7ccf13e8542", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1587, 467, true);
            WriteLiteral(@"
                    <div class=""card-content"">
                        <div class=""d-flex no-block align-items-center m-b-15 teal-text"">
                            <i class=""material-icons teal-text"">assignment</i>&nbsp;&nbsp;Chart Report
                        </div><br>
                        <h6 style=""text-align: justify;"">This chart represents the information of
                            seats acquired by each parties of Bangladesh's National Election ");
            EndContext();
            BeginContext(2055, 20, false);
#line 40 "/home/shunjid/Documents/7th/eChartiFy/Views/Shared/_LoadChartIndex1.cshtml"
                                                                                        Write(ViewBag.electionYear);

#line default
#line hidden
            EndContext();
            BeginContext(2075, 614, true);
            WriteLiteral(@" <br><br><br> Hover mouse over the chart for details.
                            To save the chart in your device click the download button
                        </h6>
                    </div>
                </div>
            </div>
        </div>

        <div class=""col l8"">
            <div class=""card"">
                <div class=""card-content analytics-info"">
                    <h5 class=""card-title"">Basic Doughnut Chart</h5>
                    <div id=""basic-doughnut"" style=""height:400px;""></div>
                </div>
            </div>
        </div>  
        </div>
    </div>
</div>





");
            EndContext();
            BeginContext(2689, 17792, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d1903cf52f7c2792bdf44b7b4191e847b7ccf13e11362", async() => {
                BeginContext(2724, 26, true);
                WriteLiteral("\n\n<script>\n    var data = ");
                EndContext();
                BeginContext(2751, 31, false);
#line 67 "/home/shunjid/Documents/7th/eChartiFy/Views/Shared/_LoadChartIndex1.cshtml"
          Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
                EndContext();
                BeginContext(2782, 2763, true);
                WriteLiteral(@";
        keys = ['year', 'constituency_Number', 'district', 'constituency', 'latitude', 'longitude', 'registered_Voters', 'validVotes', 'voter_TurnOut_Percentage', 'winner', 'runnerUp', 'winnerVotes', 'runnerUpVotes', 'marginVotes', 'marginPercentage', 'magnitude' ],
            collection = data.reduce((r, o) => {
                keys.forEach(k => r[k].push(o[k]));
                return r;
            }, Object.assign(...keys.map(k => ({ [k]: [] })))),
            { year, constituency_Number, district, constituency, latitude, longitude, registered_Voters, validVotes, voter_TurnOut_Percentage, winner, runnerUp, winnerVotes, runnerUpVotes, marginVotes, marginPercentage, magnitude} = collection;
    </script>

    <script>
        // To upper case Constituency
        for(j=0; j<constituency.length; j++){
            constituency[j] = constituency[j].toUpperCase();
        }
    </script>

<script>
        function getWinnerVotes(winnerString) {
            var votes = 0;
            for (i = 0; i < winner.le");
                WriteLiteral(@"ngth; i++) {
                if (winner[i] == winnerString) {
                    votes += winnerVotes[i];
                }
            }
            return votes;
        }
    </script>

<script>
        function countSeatForWinners(winnerString) {
            var seats = 0;
            for (i = 0; i < winner.length; i++) {
                if (winner[i] == winnerString) {
                    seats++;
                }
            }
            return seats;
        }
    </script>

    <script>
        function getRunnerUpVotes(runnerUpString) {
            var votes = 0;
            for (i = 0; i < runnerUpVotes.length; i++) {
                if (runnerUp[i] == runnerUpString) {
                    votes += runnerUpVotes[i];
                }
            }
            return votes;
        }
</script>
    
<script>
    function countRegisteredVotersForDivision(divisionCityString){
        var voters = 0;
        for (i=0; i< registered_Voters.length; i++){
            if(district[i].toUpperCase() == divis");
                WriteLiteral(@"ionCityString){
               voters += registered_Voters[i];
            }
        }
        return voters;
    }
</script>

<script>
    function countValidVotersForDivision(divisionCityString){
        var voters = 0;
        for (i=0; i< validVotes.length; i++){
            if(district[i].toUpperCase() == divisionCityString){
               voters += validVotes[i];
            }
        }
        return voters;
    }
</script>

<script>
    function countMarginForEachParty(partyName){
        var votesMargin = 0;
        for(i=0; i<marginVotes; i++){
            if(winner[i] == partyName){
                votesMargin += marginVotes;
            }
        }
        return votesMargin;
    }
</script>

");
                EndContext();
                BeginContext(5545, 41, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d1903cf52f7c2792bdf44b7b4191e847b7ccf13e14961", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(5586, 97, true);
                WriteLiteral("\n    <script>\n    \n    $(document).ready(function () {\n      M.toast({html: \'Information of year ");
                EndContext();
                BeginContext(5684, 20, false);
#line 159 "/home/shunjid/Documents/7th/eChartiFy/Views/Shared/_LoadChartIndex1.cshtml"
                                     Write(ViewBag.electionYear);

#line default
#line hidden
                EndContext();
                BeginContext(5704, 14763, true);
                WriteLiteral(@"', classes: 'rounded blue'});

        // distinct winner list
        // Pie Chart Data
        var distinctParty = Array.from(new Set(winner.concat(runnerUp))).sort();
        var getAcquiredSeatsForWinners = [];
        for(j=0; j<distinctParty.length; j++){
            getAcquiredSeatsForWinners.push({'value': countSeatForWinners(distinctParty[j]) , 'name':distinctParty[j]});
        }

        // Dounough Chart Data
        var divisionalCityNames =  ['DHAKA', 'CHITTAGONG', 'RAJSHAHI','SYLHET', 'KHULNA', 'BARISAL', 'RANGPUR'];
        var getRegisteredVotersForDivision = [];
        for(j=0; j<divisionalCityNames.length; j++){
            getRegisteredVotersForDivision.push({'value': countRegisteredVotersForDivision(divisionalCityNames[j]), 'name': divisionalCityNames[j]})
        }
        var getValidVotersForDivision = [];
        for(j=0; j<divisionalCityNames.length; j++){
            getValidVotersForDivision.push({'value': countValidVotersForDivision(divisionalCityNames[j]), 'name': divisionalCity");
                WriteLiteral(@"Names[j]})
        }

        

    
        $(function () {
            ""use strict"";
            // ------------------------------
            // Basic pie chart
            // ------------------------------
            // based on prepared DOM, initialize echarts instance
            
            // ------------------------------
            // Basic don chart
            // ------------------------------
            // based on prepared DOM, initialize echarts instance
            var basicdoughnutChart = echarts.init(document.getElementById('basic-doughnut'));
            var option = {
                // Add title
                title: {
                    text: 'Seats Won By Each Party',
                    subtext: '',
                    x: 'center'
                },

                // Add legend
                legend: {
                    orient: 'vertical',
                    x: 'left',
                    data: distinctParty
                },

                // Add custom colors
         ");
                WriteLiteral(@"       color: ['#d81b60', '#455a64', '#212529', '#f62d51', '#f4511e', '#2962FF', '#ffbc34'],

                // Display toolbox
                toolbox: {
                    show: true,
                    orient: 'vertical',
                    feature: {
                        mark: {
                            show: true,
                            title: {
                                mark: 'Markline switch',
                                markUndo: 'Undo markline',
                                markClear: 'Clear markline'
                            }
                        },
                        dataView: {
                            show: true,
                            readOnly: false,
                            title: 'View data',
                            lang: ['View chart data', 'Close', 'Update']
                        },
                        magicType: {
                            show: true,
                            title: {
                                pie: 'Sw");
                WriteLiteral(@"itch to pies',
                                funnel: 'Switch to funnel',
                            },
                            type: ['pie', 'funnel'],
                            option: {
                                funnel: {
                                    x: '25%',
                                    y: '20%',
                                    width: '50%',
                                    height: '70%',
                                    funnelAlign: 'left',
                                    max: 1548
                                }
                            }
                        },
                        restore: {
                            show: true,
                            title: 'Restore'
                        },
                        saveAsImage: {
                            show: true,
                            title: 'Same as image',
                            lang: ['Save']
                        }
                    }
                },

         ");
                WriteLiteral(@"       // Enable drag recalculate
                calculable: true,

                // Add series
                series: [
                    {
                        name: 'Browsers',
                        type: 'pie',
                        radius: ['50%', '70%'],
                        center: ['50%', '57.5%'],
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true
                                },
                                labelLine: {
                                    show: true
                                }
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    formatter: '{b}' + ' ' + '{c} ({d}%)',
                                    position: 'center',
                                    textStyle: {
                                    ");
                WriteLiteral(@"    fontSize: '17',
                                        fontWeight: '500'
                                    }
                                }
                            }
                        },

                        data: getAcquiredSeatsForWinners
                    }
                ]
            };

            basicdoughnutChart.setOption(option);

            // ------------------------------
            // Nested chart
            // ------------------------------
            // based on prepared DOM, initialize echarts instance
            var nestedChart = echarts.init(document.getElementById('nested-pie'));
            var option = {

                tooltip: {
                    trigger: 'item',
                    formatter: ""{a} <br/>{b}: {c} ({d}%)""
                },

                // Add legend
                legend: {
                    orient: 'vertical',
                    x: 'left',
                    data: divisionalCityNames
                },

                // A");
                WriteLiteral(@"dd custom colors
                color: ['#5e35b1', '#1976d2', '#0288d1', '#388e3c', '#fbc02d', '#f57c00', '#d32f2f'],

                // Display toolbox
                toolbox: {
                    show: true,
                    orient: 'vertical',
                    feature: {
                        mark: {
                            show: true,
                            title: {
                                mark: 'Markline switch',
                                markUndo: 'Undo markline',
                                markClear: 'Clear markline'
                            }
                        },
                        dataView: {
                            show: true,
                            readOnly: false,
                            title: 'View data',
                            lang: ['View chart data', 'Close', 'Update']
                        },
                        magicType: {
                            show: true,
                            title: {
              ");
                WriteLiteral(@"                  pie: 'Switch to pies',
                                funnel: 'Switch to funnel',
                            },
                            type: ['pie', 'funnel']
                        },
                        restore: {
                            show: true,
                            title: 'Restore'
                        },
                        saveAsImage: {
                            show: true,
                            title: 'Same as image',
                            lang: ['Save']
                        }
                    }
                },

                // Enable drag recalculate
                calculable: false,

                // Add series
                series: [

                    // Inner
                    {
                        name: 'Registered Voters',
                        type: 'pie',
                        selectedMode: 'single',
                        radius: [0, '40%'],

                        // for funnel
                  ");
                WriteLiteral(@"      x: '15%',
                        y: '7.5%',
                        width: '40%',
                        height: '85%',
                        funnelAlign: 'right',
                        max: 0,

                        itemStyle: {
                            normal: {
                                label: {
                                    position: 'inner',
                                    show: false
                                },
                                labelLine: {
                                    show: false
                                }
                            },
                            emphasis: {
                                label: {
                                    show: true
                                }
                            }
                        },

                        data: getRegisteredVotersForDivision
                    },

                    // Outer
                    {
                        name: 'Valid Votes Counte");
                WriteLiteral(@"d',
                        type: 'pie',
                        radius: ['60%', '85%'],

                        // for funnel
                        x: '55%',
                        y: '7.5%',
                        width: '35%',
                        height: '85%',
                        funnelAlign: 'left',
                        max: 1048,

                        data: getValidVotersForDivision
                    }
                ]
            };


            nestedChart.setOption(option);
            // ------------------------------
            // pole chart
            // ------------------------------
            // based on prepared DOM, initialize echarts instance
            var poleChart = echarts.init(document.getElementById('pole-chart'));
            // Data style
            var dataStyle = {
                normal: {
                    label: { show: false },
                    labelLine: { show: false }
                }
            };

            // Placeholder style
        ");
                WriteLiteral(@"    var placeHolderStyle = {
                normal: {
                    color: 'rgba(0,0,0,0)',
                    label: { show: false },
                    labelLine: { show: false }
                },
                emphasis: {
                    color: 'rgba(0,0,0,0)'
                }
            };
            var option = {
                title: {
                    text: 'Are you Satisfied?',
                    subtext: 'Ahmedabad, India',
                    x: 'center',
                    y: 'center',
                    itemGap: 10,
                    textStyle: {
                        color: 'rgba(30,144,255,0.8)',
                        fontSize: 19,
                        fontWeight: '500'
                    }
                },

                // Add tooltip
                tooltip: {
                    show: true,
                    formatter: ""{a} <br/>{b}: {c} ({d}%)""
                },

                // Add legend
                legend: {
                    orient: '");
                WriteLiteral(@"vertical',
                    x: document.getElementById('pole-chart').offsetWidth / 2,
                    y: 30,
                    x: '55%',
                    itemGap: 15,
                    data: ['60% Definitely yes', '30% Could be better', '10% Not at the moment']
                },

                // Add custom colors
                color: ['#2962FF', '#4fc3f7', '#f62d51'],

                // Add series
                series: [
                    {
                        name: '1',
                        type: 'pie',
                        clockWise: false,
                        radius: ['75%', '90%'],
                        itemStyle: dataStyle,
                        data: [
                            {
                                value: 60,
                                name: '60% Definitely yes'
                            },
                            {
                                value: 40,
                                name: 'invisible',
                           ");
                WriteLiteral(@"     itemStyle: placeHolderStyle
                            }
                        ]
                    },

                    {
                        name: '2',
                        type: 'pie',
                        clockWise: false,
                        radius: ['60%', '75%'],
                        itemStyle: dataStyle,
                        data: [
                            {
                                value: 30,
                                name: '30% Could be better'
                            },
                            {
                                value: 70,
                                name: 'invisible',
                                itemStyle: placeHolderStyle
                            }
                        ]
                    },

                    {
                        name: '3',
                        type: 'pie',
                        clockWise: false,
                        radius: ['45%', '60%'],
                        itemStyle: da");
                WriteLiteral(@"taStyle,
                        data: [
                            {
                                value: 10,
                                name: '10% Not at the moment'
                            },
                            {
                                value: 90,
                                name: 'invisible',
                                itemStyle: placeHolderStyle
                            }
                        ]
                    }
                ]
            };
            poleChart.setOption(option);

            //------------------------------------------------------
            // Resize chart on menu width change and window resize
            //------------------------------------------------------
            $(function () {

                // Resize chart on menu width change and window resize
                $(window).on('resize', resize);
                $("".sidebartoggler"").on('click', resize);

                // Resize function
                function resize()");
                WriteLiteral(@" {
                    setTimeout(function () {

                        // Resize chart
                        basicpieChart.resize();
                        basicdoughnutChart.resize();
                        customizedChart.resize();
                        nestedChart.resize();
                        poleChart.resize();
                    }, 200);
                }
            });
        });
    });
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Exclude = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
